{"version":3,"sources":["pages/other/MyAccount.js"],"names":["changePasswordForm","name","validate","required","value","message","hasSpecialChar","match","accountForm","pattern","billingForm","firstName","lastName","company","address","city","country","stateProvince","postalCode","phone","minLength","email","shipPhone","shipEmail","shipFirstName","shipLastName","shipCompany","shipAddress","shipCity","shipCountry","shipStateProvince","shipPostalCode","connect","state","countryData","userData","stateData","shipStateData","shipState","merchant","merchantData","dispatch","setLoader","setUser","data","deleteAllFromCart","getState","code","getShippingState","multilanguage","_ref","strings","location","pathname","addToast","useToasts","history","useHistory","_useState","useState","_useState2","_slicedToArray","isDeleted","setIsDeleted","_useForm","useForm","mode","criteriaMode","register","handleSubmit","errors","watch","setError","clearErrors","reset","_useForm2","billingRef","billingErr","billingSubmit","control","setValue","_useForm3","deliveryRef","deliveryErr","deliverySubmit","deliveryControl","setDeliveryValue","_useForm4","accountRef","accountErr","accountSubmit","setAccountValue","useEffect","getProfile","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","response","wrap","_context","prev","next","constant","ACTION","AUTH","CUSTOMER","PROFILE","WebService","get","sent","console","log","userName","emailAddress","billing","setTimeout","zone","delivery","t0","push","stop","apply","arguments","onChangePassword","_ref3","_callee2","param","_context2","PASSWORD","password","repeatPassword","currentPassword","post","appearance","autoDismiss","_x","onUpdateBilling","_ref4","_callee3","_context3","ADDRESS","id","patch","_x2","onUpdateDelivery","_ref5","_callee4","_context4","_x3","onChangeAccount","_ref6","_callee5","_context5","_x4","onDeleteConfirm","onDelete","_ref7","_callee6","_context6","delete","setLocalData","_jsxs","Fragment","children","_jsx","MetaTags","BreadcrumbsItem","to","process","Layout","headerContainerClass","headerPaddingClass","headerTop","Breadcrumb","className","Accordion","defaultActiveKey","Card","Header","Toggle","variant","eventKey","Collapse","Body","onSubmit","type","disabled","ref","Script","url","window","_env_","APP_MAP_API_KEY","onLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","types","addListener","p","getPlace","address_components","find","i","some","short_name","undefined","pCode","long_name","componentForm","street_number","route","sublocality","array","length","addressType","val","toString","placeholder","Controller","rules","render","props","onChange","e","target","map","onPasswordChange","onConfirmPassword","onClick","SweetAlert","showCancel","cancelBtnBsStyle","confirmBtnText","confirmBtnBsStyle","onConfirm","onCancel","title"],"mappings":"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","file":"static/js/26.6aae08a4.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport WebService from '../../util/webService';\r\nimport constant from '../../util/constant';\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { connect } from \"react-redux\";\r\nimport { getState, getShippingState } from \"../../redux/actions/userAction\";\r\nimport Script from 'react-load-script';\r\nimport { multilanguage } from \"redux-multilanguage\";\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport { deleteAllFromCart } from \"../../redux/actions/cartActions\";\r\nimport { setUser } from \"../../redux/actions/userAction\";\r\nimport { setLocalData } from '../../util/helper';\r\nconst changePasswordForm = {\r\n  userName: {\r\n    name: \"userName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"User Name is required\"\r\n      }\r\n    }\r\n  },\r\n  currentPassword: {\r\n    name: \"currentPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Current Password is required\"\r\n      }\r\n    }\r\n  },\r\n  password: {\r\n    name: \"password\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Password is required\"\r\n      },\r\n      validate: {\r\n        hasSpecialChar: (value) => (value && value.match(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/)) || 'Password must be minimum of 8 characters atleast one number and one special character'\r\n      }\r\n    }\r\n  },\r\n  repeatPassword: {\r\n    name: \"repeatPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Repeat Password is required\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst accountForm = {\r\n  username: {\r\n    name: \"username\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"User Name is required\"\r\n      }\r\n    }\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst billingForm = {\r\n  firstName: {\r\n    name: \"firstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  lastName: {\r\n    name: \"lastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  company: {\r\n    name: \"company\"\r\n  },\r\n  address: {\r\n    name: \"address\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  city: {\r\n    name: \"city\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  country: {\r\n    name: \"country\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  stateProvince: {\r\n    name: \"stateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  postalCode: {\r\n    name: \"postalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n  phone: {\r\n    name: \"phone\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Phone number is required\"\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Enter a 10-digit number\"\r\n      }\r\n    }\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  shipPhone: {\r\n    name: \"shipPhone\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Phone number is required\"\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Enter a 10-digit number\"\r\n      }\r\n    }\r\n  },\r\n  shipEmail: {\r\n    name: \"shipEmail\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  shipFirstName: {\r\n    name: \"shipFirstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipLastName: {\r\n    name: \"shipLastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCompany: {\r\n    name: \"shipCompany\"\r\n  },\r\n  shipAddress: {\r\n    name: \"shipAddress\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCity: {\r\n    name: \"shipCity\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCountry: {\r\n    name: \"shipCountry\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  shipStateProvince: {\r\n    name: \"shipStateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  shipPostalCode: {\r\n    name: \"shipPostalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n}\r\nconst MyAccount = ({ setUser, deleteAllFromCart, merchant, strings, location, setLoader, getState, getShippingState, countryData, stateData, shipStateData, userData }) => {\r\n  const { pathname } = location;\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  const [isDeleted, setIsDeleted] = useState(false)\r\n  const { register, handleSubmit, errors, watch, setError, clearErrors, reset } = useForm({\r\n    mode: \"onChange\",\r\n    criteriaMode: \"all\"\r\n  });\r\n  const {\r\n    register: billingRef,\r\n    errors: billingErr,\r\n    handleSubmit: billingSubmit,\r\n    control, setValue\r\n  } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n  const {\r\n    register: deliveryRef,\r\n    errors: deliveryErr,\r\n    handleSubmit: deliverySubmit,\r\n    control: deliveryControl,\r\n    setValue: setDeliveryValue\r\n  } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n  const {\r\n    register: accountRef,\r\n    errors: accountErr,\r\n    handleSubmit: accountSubmit,\r\n    // control: accountControl,\r\n    setValue: setAccountValue,\r\n    // watch: deliveryWatch,\r\n  } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    getProfile()\r\n    getState()\r\n    getShippingState()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  const getProfile = async () => {\r\n    let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.PROFILE;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      console.log(response);\r\n      if (response) {\r\n        setAccountValue('username', response.userName)\r\n        setAccountValue('email', response.emailAddress)\r\n        getState(response.billing.country)\r\n        setValue('firstName', response.billing.firstName)\r\n        setValue('lastName', response.billing.lastName)\r\n        setValue('company', response.billing.company)\r\n        setValue('address', response.billing.address)\r\n        setValue('country', response.billing.country)\r\n        setValue('city', response.billing.city)\r\n        // setValue('stateProvince', response.billing.stateProvince)\r\n        setTimeout(() => {\r\n          setValue('stateProvince', response.billing.zone)\r\n        }, 2000)\r\n        setValue('postalCode', response.billing.postalCode)\r\n        setValue('phone', response.billing.phone)\r\n        setValue('email', response.emailAddress)\r\n        if (response.delivery) {\r\n          getShippingState(response.delivery.country)\r\n          setDeliveryValue('shipFirstName', response.delivery.firstName)\r\n          setDeliveryValue('shipLastName', response.delivery.lastName)\r\n          setDeliveryValue('shipCompany', response.delivery.company)\r\n          setDeliveryValue('shipAddress', response.delivery.address)\r\n          setDeliveryValue('shipCountry', response.delivery.country)\r\n          setDeliveryValue('shipCity', response.delivery.city)\r\n          // setValue('stateProvince', response.billing.stateProvince)\r\n          setTimeout(() => {\r\n            setDeliveryValue('shipStateProvince', response.delivery.zone)\r\n          }, 2000)\r\n\r\n          setDeliveryValue('shipPostalCode', response.delivery.postalCode)\r\n          setDeliveryValue('shipPhone', response.delivery.phone)\r\n          // setValue('email', response.emailAddress)\r\n        }\r\n      }\r\n      //   // setConfig(response)\r\n    }\r\n    catch (error) {\r\n      history.push('/login')\r\n    }\r\n  }\r\n  const onChangePassword = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.CUSTOMER + constant.ACTION.PASSWORD;\r\n      let param = {\r\n        \"password\": data.password,\r\n        \"repeatPassword\": data.repeatPassword,\r\n        \"current\": data.currentPassword,\r\n        \"username\": data.userName,\r\n      }\r\n      let response = await WebService.post(action, param);\r\n      if (response) {\r\n        reset({})\r\n        addToast(\"Your password has been changed successfully!\", { appearance: \"success\", autoDismiss: true });\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your current password is wrong\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  const onConfirmPassword = (e) => {\r\n    if (watch('password') !== e.target.value) {\r\n      return setError(\r\n        changePasswordForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n  const onPasswordChange = (e) => {\r\n    if (watch('repeatPassword') !== '' && watch('repeatPassword') !== e.target.value) {\r\n      return setError(\r\n        changePasswordForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n\r\n    } else {\r\n      clearErrors(changePasswordForm.repeatPassword.name);\r\n    }\r\n\r\n  }\r\n\r\n  const handleScriptLoad = () => {\r\n    // Declare Options For Autocomplete\r\n    const options = {\r\n      types: ['address'],\r\n    };\r\n    // console.log('fsdfsdfsdfdsf')\r\n    // Initialize Google Autocomplete\r\n    /*global google*/ // To disable any eslint 'google not defined' errors\r\n    let autocomplete = new google.maps.places.Autocomplete(\r\n      document.getElementById('autocomplete'),\r\n      options,\r\n    );\r\n    // console.log(autocomplete)\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    // this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    autocomplete.addListener('place_changed', () => {\r\n      let p = autocomplete.getPlace();\r\n      // console.log(p);\r\n      setValue('country', p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n      getState(p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n\r\n      let city = p.address_components.find(i => i.types.some(i => i === \"locality\"))\r\n      if (city !== undefined) {\r\n        setValue('city', city.short_name)\r\n      }\r\n      let pCode = p.address_components.find(i => i.types.some(i => i === \"postal_code\"))\r\n      if (pCode !== undefined) {\r\n        setValue('postalCode', pCode.long_name)\r\n      }\r\n\r\n      var componentForm = {\r\n        street_number: 'short_name',\r\n        route: 'long_name',\r\n        sublocality: 'sublocality'\r\n      };\r\n      let array = [];\r\n      for (var i = 0; i < p.address_components.length; i++) {\r\n        var addressType = p.address_components[i].types[0];\r\n        if (componentForm[addressType]) {\r\n          var val = p.address_components[i][componentForm[addressType]];\r\n          array.push(val);\r\n\r\n        }\r\n      }\r\n      setValue('address', array.toString())\r\n      setTimeout(() => {\r\n        setValue('stateProvince', p.address_components.find(i => i.types.some(i => i === \"administrative_area_level_1\")).short_name)\r\n      }, 2000);\r\n\r\n    });\r\n  }\r\n  const handleDeliveryScriptLoad = () => {\r\n    // Declare Options For Autocomplete\r\n    const options = {\r\n      types: ['address'],\r\n    };\r\n    // console.log('fsdfsdfsdfdsf')\r\n    // Initialize Google Autocomplete\r\n\r\n    let autocomplete = new google.maps.places.Autocomplete(\r\n      document.getElementById('autocomplete1'),\r\n      options,\r\n    );\r\n    // console.log(autocomplete)\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    // this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    autocomplete.addListener('place_changed', () => {\r\n      let p = autocomplete.getPlace();\r\n      console.log(p);\r\n      setDeliveryValue('shipCountry', p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n      getShippingState(p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n\r\n      let city = p.address_components.find(i => i.types.some(i => i === \"locality\"))\r\n      if (city !== undefined) {\r\n        setDeliveryValue('shipCity', city.short_name)\r\n      }\r\n      let pCode = p.address_components.find(i => i.types.some(i => i === \"postal_code\"))\r\n      if (pCode !== undefined) {\r\n        setDeliveryValue('shipPostalCode', pCode.long_name)\r\n      }\r\n\r\n      var componentForm = {\r\n        street_number: 'short_name',\r\n        route: 'long_name',\r\n        sublocality: 'sublocality'\r\n      };\r\n      let array = [];\r\n      for (var i = 0; i < p.address_components.length; i++) {\r\n        var addressType = p.address_components[i].types[0];\r\n        if (componentForm[addressType]) {\r\n          var val = p.address_components[i][componentForm[addressType]];\r\n          array.push(val);\r\n\r\n        }\r\n      }\r\n      setDeliveryValue('shipAddress', array.toString())\r\n      setTimeout(() => {\r\n        setDeliveryValue('shipStateProvince', p.address_components.find(i => i.types.some(i => i === \"administrative_area_level_1\")).short_name)\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  const onUpdateBilling = async (data) => {\r\n    // console.log(data)\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.ADDRESS;\r\n      let param = {\r\n        \"id\": userData.id,\r\n        \"billing\": {\r\n          \"company\": data.company,\r\n          \"address\": data.address,\r\n          \"city\": data.city,\r\n          \"postalCode\": data.postalCode,\r\n          \"stateProvince\": data.stateProvince,\r\n          \"country\": data.country,\r\n          \"zone\": data.stateProvince,\r\n          \"firstName\": data.firstName,\r\n          \"lastName\": data.lastName,\r\n          \"phone\": data.phone\r\n        }\r\n        // \"delivery\": {\r\n        //   \"company\": deliveryWatch('shipCompany'),\r\n        //   \"address\": deliveryWatch('shipAddress'),\r\n        //   \"city\": deliveryWatch('shipCity'),\r\n        //   \"postalCode\": deliveryWatch('shipPostalCode'),\r\n        //   \"stateProvince\": deliveryWatch('shipStateProvince'),\r\n        //   \"country\": deliveryWatch('shipCountry'),\r\n        //   \"zone\": deliveryWatch('shipStateProvince'),\r\n        //   \"firstName\": deliveryWatch('shipFirstName'),\r\n        //   \"lastName\": deliveryWatch('shipLastName'),\r\n        //   \"phone\": deliveryWatch('shipPhone')\r\n        // }\r\n      }\r\n      // console.log(param);\r\n      await WebService.patch(action, param);\r\n      // if (response) {\r\n      // reset({})\r\n      addToast(\"Your billing address has been updated successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      // }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your billing address has been updated fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  const onUpdateDelivery = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.ADDRESS;\r\n      let param = {\r\n        \"id\": userData.id,\r\n        // \"billing\": {\r\n        //   \"company\": billingWatch('company'),\r\n        //   \"address\": billingWatch('address'),\r\n        //   \"city\": billingWatch('city'),\r\n        //   \"postalCode\": billingWatch('postalCode'),\r\n        //   \"stateProvince\": billingWatch('stateProvince'),\r\n        //   \"country\": billingWatch('country'),\r\n        //   \"zone\": billingWatch('stateProvince'),\r\n        //   \"firstName\": billingWatch('firstName'),\r\n        //   \"lastName\": billingWatch('lastName'),\r\n        //   \"phone\": billingWatch('phone')\r\n        // },\r\n        \"delivery\": {\r\n          \"company\": data.shipCompany,\r\n          \"address\": data.shipAddress,\r\n          \"city\": data.shipCity,\r\n          \"postalCode\": data.shipPostalCode,\r\n          \"stateProvince\": data.shipStateProvince,\r\n          \"country\": data.shipCountry,\r\n          \"zone\": data.shipStateProvince,\r\n          \"firstName\": data.shipFirstName,\r\n          \"lastName\": data.shipLastName,\r\n          \"phone\": data.shipPhone\r\n        }\r\n      }\r\n      console.log(param);\r\n      await WebService.patch(action, param);\r\n      // if (response) {\r\n      // reset({})\r\n      addToast(\"Your delivery address has been updated successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      // }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your delivery address has been updated fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n\r\n  const onChangeAccount = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER;\r\n      let param = {\r\n        emailAddress: data.email\r\n      }\r\n      // console.log(param);\r\n      await WebService.patch(action, param);\r\n      // if (response) {\r\n      // reset({})\r\n      addToast(\"Your account has been updated successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      // }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your account has been updated fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  const onDeleteConfirm = () => {\r\n    console.log('confrim')\r\n    setIsDeleted(!isDeleted)\r\n  }\r\n  const onDelete = async () => {\r\n    console.log('delete')\r\n    console.log('delete')\r\n    onDeleteConfirm()\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER;\r\n\r\n\r\n      await WebService.delete(action);\r\n\r\n      addToast(\"Your account has been deleted successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      history.push('/login')\r\n      setUser('')\r\n      setLocalData('token', '')\r\n      deleteAllFromCart()\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your account has been deleted fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"My Account\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Compare page of flone react minimalist eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        {strings[\"My Account\"]}\r\n      </BreadcrumbsItem>\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"myaccount-area pb-80 pt-100\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"ml-auto mr-auto col-lg-9\">\r\n                <div className=\"myaccount-wrapper\">\r\n                  <Accordion defaultActiveKey=\"3\">\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"3\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>1 .</span> {strings[\"Your account\"]}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"3\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Your account\"]}</h4>\r\n                            </div>\r\n                            <form onSubmit={accountSubmit(onChangeAccount)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"User Name\"]}</label>\r\n                                    <input type=\"text\" name={accountForm.username.name} disabled ref={accountRef(accountForm.username.validate)} />\r\n                                    {accountErr[accountForm.username.name] && <p className=\"error-msg\">{errors[accountForm.username.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Email address\"]}</label>\r\n                                    <input type=\"text\" name={accountForm.email.name} ref={accountRef(accountForm.email.validate)} />\r\n                                    {accountErr[accountForm.email.name] && <p className=\"error-msg\">{accountErr[accountForm.email.name].message}</p>}\r\n\r\n                                  </div>\r\n                                </div>\r\n\r\n                              </div>\r\n\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"0\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>2 .</span> {strings[\"Billing Address\"]}{\" \"}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Billing Information\"]}</h4>\r\n                              {/* <h5>Your Personal Details</h5> */}\r\n                            </div>\r\n                            <form onSubmit={billingSubmit(onUpdateBilling)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"First Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.firstName.name} ref={billingRef(billingForm.firstName.validate)} />\r\n                                    {billingErr[billingForm.firstName.name] && <p className=\"error-msg\">{billingErr[billingForm.firstName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Last Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.lastName.name} ref={billingRef(billingForm.lastName.validate)} />\r\n                                    {billingErr[billingForm.lastName.name] && <p className=\"error-msg\">{billingErr[billingForm.lastName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Company Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.company.name} ref={billingRef(billingForm.company.validate)} />\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <Script\r\n                                      url={\"https://maps.googleapis.com/maps/api/js?key=\" + window._env_.APP_MAP_API_KEY + \"&libraries=places\"}\r\n                                      onLoad={handleScriptLoad}\r\n                                    />\r\n                                    <label>{strings[\"Street Address\"]}</label>\r\n                                    <input\r\n                                      className=\"billing-info\"\r\n                                      placeholder={strings[\"House number and street name\"]}\r\n                                      type=\"text\"\r\n                                      id=\"autocomplete\"\r\n                                      name={billingForm.address.name}\r\n                                      ref={billingRef(billingForm.address.validate)}\r\n                                    />\r\n                                    {billingErr[billingForm.address.name] && <p className=\"error-msg\">{billingErr[billingForm.address.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Country\"]}</label>\r\n                                    <Controller\r\n                                      name={billingForm.country.name}\r\n                                      control={control}\r\n                                      rules={billingForm.country.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value); }} value={props.value}>\r\n                                            <option>{strings[\"Select a country\"]}</option>\r\n                                            {\r\n\r\n                                              countryData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>\r\n                                        )\r\n                                      }}\r\n                                    />\r\n                                    {billingErr[billingForm.country.name] && <p className=\"error-msg\">{billingErr[billingForm.country.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"State\"]}</label>\r\n                                    {\r\n                                      stateData && stateData.length > 0 ?\r\n                                        <Controller\r\n                                          name={billingForm.stateProvince.name}\r\n                                          control={control}\r\n                                          rules={billingForm.stateProvince.validate}\r\n                                          render={props => {\r\n                                            return (\r\n                                              <select onChange={(e) => props.onChange(e.target.value)} value={props.value}>\r\n                                                <option>{strings[\"Select a state\"]}</option>\r\n                                                {\r\n                                                  stateData.map((data, i) => {\r\n                                                    return <option key={i} value={data.code}>{data.name}</option>\r\n                                                  })\r\n                                                }\r\n                                              </select>)\r\n                                          }}\r\n                                        />\r\n                                        :\r\n                                        <input type=\"text\" name={billingForm.stateProvince.name} ref={billingRef(billingForm.stateProvince.validate)} />\r\n                                    }\r\n                                    {billingErr[billingForm.stateProvince.name] && <p className=\"error-msg\">{billingErr[billingForm.stateProvince.name].message}</p>}\r\n\r\n                                    {/* <input type=\"text\" /> */}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Town/City\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.city.name} ref={billingRef(billingForm.city.validate)} />\r\n                                    {billingErr[billingForm.city.name] && <p className=\"error-msg\">{billingErr[billingForm.city.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Postcode\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.postalCode.name} ref={billingRef(billingForm.postalCode.validate)} />\r\n                                    {billingErr[billingForm.postalCode.name] && <p className=\"error-msg\">{billingErr[billingForm.postalCode.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                {/* <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>Email Address</label>\r\n                                    <input type=\"email\" name={billingForm.email.name} ref={billingRef(billingForm.email.validate)} />\r\n                                    {billingErr[billingForm.email.name] && <p className=\"error-msg\">{billingErr[billingForm.email.name].message}</p>}\r\n                                  </div>\r\n                                </div> */}\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Phone\"]}</label>\r\n                                    <input type=\"number\" name={billingForm.phone.name} ref={billingRef(billingForm.phone.validate)} />\r\n                                    {billingErr[billingForm.phone.name] && <p className=\"error-msg\">{billingErr[billingForm.phone.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"1\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>3 .</span> {strings[\"Delivery Address\"]}{\" \"}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"1\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Delivery Information\"]}</h4>\r\n                              {/* <h5>Your Personal Details</h5> */}\r\n                            </div>\r\n                            <form onSubmit={deliverySubmit(onUpdateDelivery)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"First Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipFirstName.name} ref={deliveryRef(billingForm.shipFirstName.validate)} />\r\n                                    {deliveryErr[billingForm.shipFirstName.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipFirstName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Last Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipLastName.name} ref={deliveryRef(billingForm.shipLastName.validate)} />\r\n                                    {deliveryErr[billingForm.shipLastName.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipLastName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Company Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipCompany.name} ref={deliveryRef(billingForm.shipCompany.validate)} />\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <Script\r\n                                      url={\"https://maps.googleapis.com/maps/api/js?key=\" + window._env_.APP_MAP_API_KEY + \"&libraries=places\"}\r\n                                      onLoad={handleDeliveryScriptLoad}\r\n                                    />\r\n                                    <label>{strings[\"Street Address\"]}</label>\r\n                                    <input\r\n                                      className=\"billing-info\"\r\n                                      placeholder=\"House number and street name\"\r\n                                      type=\"text\"\r\n                                      id=\"autocomplete1\"\r\n                                      name={billingForm.shipAddress.name}\r\n                                      ref={deliveryRef(billingForm.shipAddress.validate)}\r\n                                    />\r\n                                    {deliveryErr[billingForm.shipAddress.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipAddress.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Country\"]}</label>\r\n                                    <Controller\r\n                                      name={billingForm.shipCountry.name}\r\n                                      control={deliveryControl}\r\n                                      rules={billingForm.shipCountry.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(e) => { props.onChange(e.target.value); getShippingState(e.target.value); }} value={props.value}>\r\n                                            <option>{strings[\"Select a country\"]}</option>\r\n                                            {\r\n\r\n                                              countryData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>\r\n                                        )\r\n                                      }}\r\n                                    />\r\n                                    {deliveryErr[billingForm.shipCountry.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipCountry.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"State\"]}</label>\r\n                                    {\r\n                                      shipStateData && shipStateData.length > 0 ?\r\n                                        <Controller\r\n                                          name={billingForm.shipStateProvince.name}\r\n                                          control={deliveryControl}\r\n                                          rules={billingForm.shipStateProvince.validate}\r\n                                          render={props => {\r\n                                            return (\r\n                                              <select onChange={(e) => props.onChange(e.target.value)} value={props.value}>\r\n                                                <option>{strings[\"Select a state\"]}</option>\r\n                                                {\r\n                                                  shipStateData.map((data, i) => {\r\n                                                    return <option key={i} value={data.code}>{data.name}</option>\r\n                                                  })\r\n                                                }\r\n                                              </select>)\r\n                                          }}\r\n                                        />\r\n                                        :\r\n                                        <input type=\"text\" name={billingForm.shipStateProvince.name} ref={deliveryRef(billingForm.shipStateProvince.validate)} />\r\n                                    }\r\n                                    {deliveryErr[billingForm.shipStateProvince.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipStateProvince.name].message}</p>}\r\n\r\n                                    {/* <input type=\"text\" /> */}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Town/City\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipCity.name} ref={deliveryRef(billingForm.shipCity.validate)} />\r\n                                    {deliveryErr[billingForm.shipCity.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipCity.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Postcode\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipPostalCode.name} ref={deliveryRef(billingForm.shipPostalCode.validate)} />\r\n                                    {deliveryErr[billingForm.shipPostalCode.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipPostalCode.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                {/* <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>Email Address</label>\r\n                                    <input type=\"email\" name={billingForm.shipEmail.name} ref={billingRef(billingForm.shipEmail.validate)} />\r\n                                    {billingErr[billingForm.shipEmail.name] && <p className=\"error-msg\">{billingErr[billingForm.shipEmail.name].message}</p>}\r\n                                  </div>\r\n                                </div> */}\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Phone\"]}</label>\r\n                                    <input type=\"number\" name={billingForm.shipPhone.name} ref={deliveryRef(billingForm.shipPhone.validate)} />\r\n                                    {deliveryErr[billingForm.shipPhone.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipPhone.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"2\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>4 .</span> {strings[\"Change your password\"]}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"2\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Change Password\"]}</h4>\r\n                            </div>\r\n                            <form onSubmit={handleSubmit(onChangePassword)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"User Name\"]}</label>\r\n                                    <input type=\"text\" name={changePasswordForm.userName.name} ref={register(changePasswordForm.userName.validate)} />\r\n                                    {errors[changePasswordForm.userName.name] && <p className=\"error-msg\">{errors[changePasswordForm.userName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Current Password\"]}</label>\r\n                                    <input type=\"password\" name={changePasswordForm.currentPassword.name} ref={register(changePasswordForm.currentPassword.validate)} />\r\n                                    {errors[changePasswordForm.currentPassword.name] && <p className=\"error-msg\">{errors[changePasswordForm.currentPassword.name].message}</p>}\r\n\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Password\"]}</label>\r\n                                    <input type=\"password\" onChange={(e) => onPasswordChange(e)} name={changePasswordForm.password.name} ref={register(changePasswordForm.password.validate)} />\r\n                                    {errors[changePasswordForm.password.name] && <p className=\"error-msg\">{errors[changePasswordForm.password.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Repeat Password\"]}Repeat Password</label>\r\n                                    <input type=\"password\" onChange={(e) => onConfirmPassword(e)} name={changePasswordForm.repeatPassword.name} ref={register(changePasswordForm.repeatPassword.validate)} />\r\n                                    {errors[changePasswordForm.repeatPassword.name] && <p className=\"error-msg\">{errors[changePasswordForm.repeatPassword.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        {/* */}\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"4\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>5 .</span> {strings[\"Account Management\"]}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"4\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            {/* <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Your account\"]}</h4>\r\n                            </div> */}\r\n                            <form>\r\n                              {/* <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <button type=\"button\" onClick={onDeleteConfirm} className=\"delete_account\">\r\n                                    <span className=\"label\">{strings[\"Delete your account\"]}</span>\r\n                                  </button>\r\n                                </div>\r\n\r\n                              </div> */}\r\n                              <div className=\"account-management\">\r\n                                <div className=\"delete-btn\">\r\n                                  <button type=\"button\" onClick={onDeleteConfirm} >{strings[\"Delete your account\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                  </Accordion>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        {\r\n          isDeleted &&\r\n          <SweetAlert\r\n            showCancel\r\n            cancelBtnBsStyle=\"light\"\r\n            confirmBtnText=\"Yes, delete it!\"\r\n            confirmBtnBsStyle=\"danger\"\r\n            onConfirm={onDelete}\r\n            onCancel={onDeleteConfirm}\r\n            title=\"Are you sure?\"\r\n          >\r\n            Are you sure that you want to permanently delete this account\r\n        </SweetAlert>\r\n        }\r\n      </Layout>\r\n    </Fragment >\r\n  );\r\n};\r\n\r\nMyAccount.propTypes = {\r\n  location: PropTypes.object\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    countryData: state.userData.country,\r\n    userData: state.userData.userData,\r\n    // cartItems: state.cartData.cartItems,\r\n    // currentLocation: state.userData.currentAddress,\r\n    stateData: state.userData.state,\r\n    shipStateData: state.userData.shipState,\r\n    merchant: state.merchantData.merchant\r\n    // defaultStore: state.merchantData.defaultStore,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    setUser: (data) => {\r\n      dispatch(setUser(data));\r\n    },\r\n    deleteAllFromCart: () => {\r\n      dispatch(deleteAllFromCart())\r\n    },\r\n    getState: (code) => {\r\n      dispatch(getState(code));\r\n    },\r\n    getShippingState: (code) => {\r\n      dispatch(getShippingState(code));\r\n    },\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(MyAccount));\r\n\r\n  // export default MyAccount;\r\n"],"sourceRoot":""}