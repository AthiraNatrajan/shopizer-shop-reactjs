{"version":3,"sources":["pages/other/Checkout.js"],"names":["stripePromise","loadStripe","window","_env_","APP_STRIPE_KEY","paymentForm","firstName","name","validate","required","value","message","lastName","company","address","city","country","stateProvince","postalCode","phone","minLength","email","pattern","shipFirstName","shipLastName","shipCompany","shipAddress","shipCity","shipCountry","shipStateProvince","shipPostalCode","isAgree","password","hasSpecialChar","match","repeatPassword","CARD_ELEMENT_OPTIONS","iconStyle","hidePostalCode","style","base","iconColor","color","fontSize","fontFamily","fontSmoothing","invalid","connect","state","cartID","cartData","shipCountryData","userData","stateData","shipStateData","shipState","currentLocation","currentAddress","defaultStore","merchantData","merchant","isLoading","loading","currentLanguageCode","multilanguage","dispatch","setLoader","getShippingCountry","getState","code","getShippingState","deleteAllFromCart","orderID","_ref","strings","location","pathname","history","useHistory","addToast","useToasts","_useState","useState","_useState2","_slicedToArray","config","setConfig","_useState3","_useState4","cartItems","setCartItems","_useState5","_useState6","isShipping","setIsShipping","_useState7","_useState8","isAccount","setIsAccount","_useState9","_useState10","timer","setTimer","_useState11","_useState12","shippingOptions","setShippingOptions","_useState13","_useState14","shippingQuote","setShippingQuote","_useState15","_useState16","selectedOptions","setSelectedOptions","_useState17","_useState18","deliveryData","setDeliveryData","_useState19","_useState20","agreementData","setAgreementData","_useForm","useForm","mode","criteriaMode","register","control","handleSubmit","errors","setValue","watch","reset","setError","clearErrors","_useState21","_useState22","ref","setRef","useEffect","getSummaryOrder","getConfig","shippingQuoteChange","onChangeShipping","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","response","wrap","_context","prev","next","console","log","constant","ACTION","CART","WebService","get","sent","t0","setTimeout","push","getProfile","setDefaultsValue","stop","apply","arguments","length","find","i","types","some","address_components","short_name","_ref3","_callee2","_context2","AUTH","CUSTOMER","PROFILE","billing","zone","emailAddress","delivery","_ref4","_callee3","_context3","CONFIG","onChangeShipAddress","_ref5","_callee4","_context4","_ref6","_callee5","param","_context5","SHIPPING","post","shippingQuoteOptionId","_ref7","_callee6","quoteID","_context6","TOTAL","totals","_x","onSubmitOrder","_ref8","_callee7","data","elements","stripe","card","result","_context7","getElement","CardElement","createToken","error","appearance","autoDismiss","onPayment","token","id","_x2","_x3","_x4","_ref9","_callee8","customer","_context8","CHECKOUT","currency","clear","setLocalData","_x5","_x6","onAgreement","_ref10","_callee9","_context9","CONTENT","BOXES","AGREEMENT","description","changeAddress","p","JSON","stringify","unity","executed","_jsxs","Fragment","children","_jsx","MetaTags","BreadcrumbsItem","to","process","Layout","headerContainerClass","headerPaddingClass","headerTop","Breadcrumb","className","isValidObject","products","Link","type","Script","url","APP_MAP_API_KEY","onLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","addListener","getPlace","undefined","pCode","long_name","componentForm","street_number","route","sublocality","array","addressType","val","toString","placeholder","Controller","rules","render","props","onChange","e","target","map","onBlur","clearTimeout","onPasswordChange","onConfirmPassword","a","defaultValue","cartItem","key","width","quantity","finalPrice","quote","title","total","displayShipping","checked","optionName","optionPriceText","textAlign","APP_PAYMENT_TYPE","Elements","options","locale","ElementsConsumer","_ref11","_Fragment","onReady","dangerouslySetInnerHTML","__html","replace","onClick","d","height","srcDoc"],"mappings":"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","file":"static/js/24.7071a7d0.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { connect } from \"react-redux\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\n// import { getDiscountPrice } from \"../../helpers/product\";\r\n// import Tab from \"react-bootstrap/Tab\";\r\n// import Nav from \"react-bootstrap/Nav\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport { isValidObject, setLocalData } from \"../../util/helper\";\r\nimport constant from '../../util/constant';\r\nimport WebService from '../../util/webService';\r\nimport { getShippingCountry, getState, getShippingState } from \"../../redux/actions/userAction\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport {\r\n  CardElement, Elements, ElementsConsumer\r\n} from '@stripe/react-stripe-js';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\n// import {\r\n//   deleteAllFromCart\r\n// } from \"../../redux/actions/cartActions\";\r\nimport Script from 'react-load-script';\r\nimport { multilanguage } from \"redux-multilanguage\";\r\n\r\n\r\n\r\nconst stripePromise = loadStripe(window._env_.APP_STRIPE_KEY);\r\nconst paymentForm = {\r\n  firstName: {\r\n    name: \"firstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  lastName: {\r\n    name: \"lastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  company: {\r\n    name: \"company\"\r\n  },\r\n  address: {\r\n    name: \"address\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  city: {\r\n    name: \"city\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  country: {\r\n    name: \"country\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  stateProvince: {\r\n    name: \"stateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  postalCode: {\r\n    name: \"postalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n  phone: {\r\n    name: \"phone\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Phone number is required\"\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Enter a 10-digit number\"\r\n      }\r\n    }\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  shipFirstName: {\r\n    name: \"shipFirstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipLastName: {\r\n    name: \"shipLastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCompany: {\r\n    name: \"shipCompany\"\r\n  },\r\n  shipAddress: {\r\n    name: \"shipAddress\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCity: {\r\n    name: \"shipCity\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCountry: {\r\n    name: \"shipCountry\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  shipStateProvince: {\r\n    name: \"shipStateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  shipPostalCode: {\r\n    name: \"shipPostalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n  isAgree: {\r\n    name: \"isAgree\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Please agree to our terms and conditions\"\r\n      }\r\n    }\r\n  },\r\n  password: {\r\n    name: \"password\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Password is required\"\r\n      },\r\n      validate: {\r\n        hasSpecialChar: (value) => (value && value.match(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/)) || 'Password must be minimum of 8 characters atleast one number and one special character'\r\n      }\r\n    }\r\n  },\r\n  repeatPassword: {\r\n    name: \"repeatPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Repeat Password is required\"\r\n      }\r\n    }\r\n  }\r\n}\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  iconStyle: \"solid\",\r\n  hidePostalCode: true,\r\n  style: {\r\n    base: {\r\n      iconColor: \"#303238\",\r\n      color: \"#303238\",\r\n      fontSize: \"16px\",\r\n      fontFamily: '\"Open Sans\", sans-serif',\r\n      fontSmoothing: \"antialiased\",\r\n      \"::placeholder\": {\r\n        color: \"#CFD7DF\"\r\n      }\r\n    },\r\n    invalid: {\r\n      color: \"#e5424d\",\r\n      \":focus\": {\r\n        color: \"#e5424d\"\r\n      }\r\n    }\r\n  }\r\n};\r\nconst Checkout = ({shipStateData, isLoading, currentLanguageCode, merchant, strings, location, cartID, defaultStore,getShippingCountry, getState,getShippingState,  shipCountryData, stateData, currentLocation, userData, setLoader, deleteAllFromCart }) => {\r\n  const { pathname } = location;\r\n  const history = useHistory();\r\n  const { addToast } = useToasts();\r\n  const [config, setConfig] = useState({});\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isShipping, setIsShipping] = useState(false);\r\n  const [isAccount, setIsAccount] = useState(false);\r\n  const [timer, setTimer] = useState('');\r\n  const [shippingOptions, setShippingOptions] = useState();\r\n  const [shippingQuote, setShippingQuote] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState('');\r\n  const [deliveryData, setDeliveryData] = useState();\r\n  const [agreementData, setAgreementData] = useState('');\r\n  const { register, control, handleSubmit, errors, setValue, watch, reset, setError, clearErrors } = useForm({\r\n    mode: \"onChange\",\r\n    criteriaMode: \"all\"\r\n  });\r\n\r\n\r\n\r\n\r\n  // console.log(window._env_.APP_PAYMENT_TYPE);\r\n  const [ref, setRef] = useState(null)\r\n  useEffect(() => {\r\n    getSummaryOrder()\r\n    // getNuviePayment()\r\n    getState('')\r\n    getShippingState('')\r\n    getShippingCountry(currentLanguageCode);\r\n    getConfig()\r\n    shippingQuoteChange('')\r\n    onChangeShipping()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getSummaryOrder = async () => {\r\n    setLoader(true)\r\n    console.log('GET SUMMARY')\r\n    let action = constant.ACTION.CART + cartID + '?store=' + defaultStore;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      // console.log(JSON.stringify(response));\r\n      if (response) {\r\n        setLoader(false)\r\n        setCartItems(response)\r\n      }\r\n    } catch (error) {\r\n      setLoader(false) \r\n      deleteAllFromCart()\r\n      setTimeout(() => {\r\n        history.push('/')\r\n      }, 200);\r\n      \r\n    }\r\n    if (userData) {\r\n      getProfile()\r\n    } else {\r\n      setDefaultsValue()\r\n    }\r\n  }\r\n  const setDefaultsValue = () => {\r\n    if (currentLocation.length > 0) {\r\n      setValue('country', currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n      setValue('city', currentLocation.find(i => i.types.some(i => i === \"locality\")).address_components[0].short_name)\r\n      setValue('stateProvince', currentLocation.find(i => i.types.some(i => i === \"administrative_area_level_1\")).address_components[0].short_name)\r\n    }\r\n  }\r\n  const getProfile = async () => {\r\n    let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.PROFILE;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        getState(response.billing.country)\r\n        // console.log(response.billing.firstName);\r\n        setValue('firstName', response.billing.firstName)\r\n        setValue('lastName', response.billing.lastName)\r\n        setValue('company', response.billing.company)\r\n        setValue('address', response.billing.address)\r\n        setValue('country', response.billing.country)\r\n        setValue('city', response.billing.city)\r\n        setTimeout(() => {\r\n          setValue('stateProvince', response.billing.zone)\r\n        }, 1000)\r\n        setValue('postalCode', response.billing.postalCode)\r\n        setValue('phone', response.billing.phone)\r\n        setValue('email', response.emailAddress)\r\n\r\n        if (response.delivery) {\r\n          setDeliveryData(response.delivery)\r\n        //   getShippingState(response.delivery.country)\r\n        //   setValue('shipFirstName', response.delivery.firstName)\r\n        //   setValue('shipLastName', response.delivery.lastName)\r\n        //   setValue('shipCompany', response.delivery.company)\r\n        //   setValue('shipAddress', response.delivery.address)\r\n        //   setValue('shipCountry', response.delivery.country)\r\n        //   setValue('shipCity', response.delivery.city)\r\n        //   setTimeout(() => {\r\n        //     setValue('shipStateProvince', response.delivery.zone)\r\n        //   }, 1000)\r\n        //   // setValue('shipStateProvince', response.delivery.stateProvince)\r\n        //   setValue('shipPostalCode', response.delivery.postalCode)\r\n        }\r\n        \r\n        onChangeShipping()\r\n        // setConfig(response)\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n  const getConfig = async () => {\r\n    let action = constant.ACTION.CONFIG;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        setConfig(response)\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n\r\n  // const onChangeAddress = async () => {\r\n  //   //console.log('Change address');\r\n  // }\r\n  const onChangeShipAddress = async () => {\r\n    setIsShipping(!isShipping)\r\n    // console.log(currentLocation.find(i => i.types.some(i => i == \"country\")).address_components[0].short_name)\r\n    setTimeout(() => {\r\n      if (userData) {\r\n            if(deliveryData){\r\n            getShippingState(deliveryData.country)\r\n            setValue('shipFirstName', deliveryData.firstName)\r\n            setValue('shipLastName', deliveryData.lastName)\r\n            setValue('shipCompany', deliveryData.company)\r\n            setValue('shipAddress', deliveryData.address)\r\n            setValue('shipCountry', deliveryData.country)\r\n            setValue('shipCity', deliveryData.city)\r\n            setTimeout(() => {\r\n              setValue('shipStateProvince', deliveryData.zone)\r\n            }, 1000)\r\n            // setValue('shipStateProvince', response.delivery.stateProvince)\r\n            setValue('shipPostalCode', deliveryData.postalCode)\r\n          }\r\n       } else{\r\n        if(currentLocation.length > 0) {\r\n          //console.log(currentLocation);\r\n          setTimeout(() => {\r\n            getShippingState(currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n            setValue('shipCountry', currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n            setValue('shipCity', currentLocation.find(i => i.types.some(i => i === \"locality\")).address_components[0].short_name)\r\n            setTimeout(() => {\r\n              setValue('shipStateProvince', currentLocation.find(i => i.types.some(i => i === \"administrative_area_level_1\")).address_components[0].short_name)\r\n            }, 1000)\r\n            \r\n            onChangeShipping()\r\n          }, 1000);\r\n        }\r\n      }\r\n    }, 1000);\r\n     \r\n  }\r\n  const handleScriptLoad = () => {\r\n    // Declare Options For Autocomplete\r\n    const options = {\r\n      types: ['address'],\r\n    };\r\n    // console.log('fsdfsdfsdfdsf')\r\n    // Initialize Google Autocomplete\r\n    /*global google*/ // To disable any eslint 'google not defined' errors\r\n    let autocomplete = new google.maps.places.Autocomplete(\r\n      document.getElementById('autocomplete'),\r\n      options,\r\n    );\r\n    // console.log(autocomplete)\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    // this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    autocomplete.addListener('place_changed', () => {\r\n      let p = autocomplete.getPlace();\r\n      // console.log(p);\r\n      setValue('country', p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n      getState(p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n\r\n      let city = p.address_components.find(i => i.types.some(i => i === \"locality\"))\r\n      if (city !== undefined) {\r\n        setValue('city', city.short_name)\r\n      }\r\n      let pCode = p.address_components.find(i => i.types.some(i => i === \"postal_code\"))\r\n      if (pCode !== undefined) {\r\n        setValue('postalCode', pCode.long_name)\r\n      }\r\n\r\n      var componentForm = {\r\n        street_number: 'short_name',\r\n        route: 'long_name',\r\n        sublocality: 'sublocality'\r\n      };\r\n      let array = [];\r\n      for (var i = 0; i < p.address_components.length; i++) {\r\n        var addressType = p.address_components[i].types[0];\r\n        if (componentForm[addressType]) {\r\n          var val = p.address_components[i][componentForm[addressType]];\r\n          array.push(val);\r\n\r\n        }\r\n      }\r\n      setValue('address', array.toString())\r\n      setTimeout(() => {\r\n        setValue('stateProvince', p.address_components.find(i => i.types.some(i => i === \"administrative_area_level_1\")).short_name)\r\n      }, 2000);\r\n\r\n      onChangeShipping()\r\n    });\r\n  }\r\n  const onChangeShipping = async () => {\r\n    let action = constant.ACTION.CART + cartID + '/' + constant.ACTION.SHIPPING;\r\n    let param = {};\r\n\r\n    //console.log('CHANGE SHIPPING');\r\n\r\n    if (isShipping) {\r\n      param = { 'postalCode': watch('shipPostalCode'), 'countryCode': watch('shipCountry') }\r\n    } else {\r\n      param = { 'postalCode': watch('postalCode'), 'countryCode': watch('country'), \"zpneCode\": watch('shipStateProvince') }\r\n    }\r\n    try {\r\n      let response = await WebService.post(action, param);\r\n      if (response) {\r\n        if(response.shippingOptions === \"null\" || response.shippingOptions === null){\r\n          shippingQuoteChange('')\r\n        }else{\r\n          shippingQuoteChange(response.shippingOptions[response.shippingOptions.length - 1].shippingQuoteOptionId)\r\n        }\r\n        setShippingOptions(response.shippingOptions)\r\n        setSelectedOptions(response.shippingOptions[response.shippingOptions.length - 1].shippingQuoteOptionId)\r\n        \r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n  const shippingQuoteChange = async (quoteID) => {\r\n    let action;\r\n\r\n    //console.log('SHIPPING QUOTE CHANGED');\r\n\r\n    if (quoteID) {\r\n      action = constant.ACTION.CART + cartID + '/' + constant.ACTION.TOTAL + '?quote=' + quoteID;\r\n    } else {\r\n      action = constant.ACTION.CART + cartID + '/' + constant.ACTION.TOTAL;\r\n    }\r\n    // console.log('Shipping action ' +action);\r\n    try {\r\n      let response = await WebService.get(action);\r\n      // console.log('Order total response ' + JSON.stringify(response));\r\n      if (response) {\r\n        setShippingQuote(response.totals)\r\n      }\r\n    } catch (error) {\r\n    }\r\n\r\n  }\r\n  const onSubmitOrder = async (data, elements, stripe) => {\r\n    setLoader(true)\r\n\r\n    if( !cartID ) {\r\n      history.push(\"/\");\r\n    }\r\n\r\n    let card = elements.getElement(CardElement);\r\n    // console.log(card);\r\n    // let ownerInfo = {\r\n    //   owner: {\r\n    //     name: data.firstName + ' ' + data.lastName,\r\n    //     phone: data.phone,\r\n    //     email: data.email\r\n    //   },\r\n    // };\r\n    const result = await stripe.createToken(card);\r\n    // stripe.createSource(card, ownerInfo).then(function (result) {\r\n    if (result.error) {\r\n      setLoader(false)\r\n      addToast(result.error.message, { appearance: \"error\", autoDismiss: true });\r\n    } else {\r\n      // console.log(result);\r\n      onPayment(data, result.token.id)\r\n    }\r\n    // });\r\n  }\r\n  const onPayment = async (data, result) => {\r\n    let action;\r\n\r\n    // console.log(data);\r\n    let param = {};\r\n    if (userData) {\r\n      action = constant.ACTION.AUTH + constant.ACTION.CART + cartID + '/' + constant.ACTION.CHECKOUT\r\n      param = {\r\n        \"shippingQuote\": selectedOptions,\r\n        \"currency\": merchant.currency,\r\n        \"payment\": {\r\n          \"paymentType\": \"CREDITCARD\",\r\n          \"transactionType\": \"CAPTURE\",\r\n          \"paymentModule\": \"stripe\",\r\n          \"paymentToken\": result.token,\r\n          \"amount\": shippingQuote[shippingQuote.length - 1].value\r\n        }\r\n      }\r\n    } else {\r\n      action = constant.ACTION.CART + cartID + '/' + constant.ACTION.CHECKOUT\r\n      let customer = {};\r\n      if (isShipping) {\r\n        customer = {\r\n          \"emailAddress\": data.email,\r\n          \"billing\": {\r\n            \"address\": data.address,\r\n            // \"company\": data.company,\r\n            \"city\": data.city,\r\n            \"postalCode\": data.postalCode,\r\n            \"country\": data.country,\r\n            // \"stateProvince\": data.stateProvince,\r\n            \"zone\": data.stateProvince,\r\n            \"firstName\": data.firstName,\r\n            \"lastName\": data.lastName,\r\n            // \"phone\": data.phone\r\n          },\r\n          \"delivery\": {\r\n            \"address\": data.shipAddress,\r\n            // \"company\": data.shipCompany,\r\n            \"city\": data.shipCity,\r\n            \"postalCode\": data.shipPostalCode,\r\n            \"country\": data.shipCountry,\r\n            // \"stateProvince\": data.shipStateProvince,\r\n            \"zone\": data.shipStateProvince,\r\n            \"firstName\": data.shipFirstName,\r\n            \"lastName\": data.shipLastName,\r\n            // \"phone\": data.shipPhone\r\n          }\r\n        }\r\n      } else {\r\n        customer = {\r\n          \"emailAddress\": data.email,\r\n          \"billing\": {\r\n            \"address\": data.address,\r\n            // \"company\": data.company,\r\n            \"city\": data.city,\r\n            \"postalCode\": data.postalCode,\r\n            \"country\": data.country,\r\n            // \"stateProvince\": data.stateProvince,\r\n            \"zone\": data.stateProvince,\r\n            \"firstName\": data.firstName,\r\n            \"lastName\": data.lastName,\r\n            // \"phone\": data.phone\r\n          }\r\n        }\r\n      }\r\n      if (isAccount) {\r\n        customer['password'] = data.password;\r\n        customer['repeatPassword'] = data.repeatPassword;\r\n      }\r\n      param = {\r\n        \"shippingQuote\": selectedOptions,\r\n        \"currency\": merchant.currency,\r\n        \"payment\": {\r\n          \"paymentType\": \"CREDITCARD\",\r\n          \"transactionType\": \"CAPTURE\",\r\n          \"paymentModule\": \"stripe\",\r\n          \"paymentToken\": result.token,\r\n          \"amount\": shippingQuote[shippingQuote.length - 1].value\r\n        },\r\n        \"customer\": customer\r\n      }\r\n    }\r\n    // console.log(param);\r\n    // \r\n    try {\r\n      let response = await WebService.post(action, param);\r\n      // console.log(response)\r\n      if (response) {\r\n        reset({})\r\n        ref.clear()\r\n        deleteAllFromCart(response.id)\r\n        setLocalData('order-email', data.email)\r\n        addToast(\"Your order has been submitted\", { appearance: \"success\", autoDismiss: true });\r\n        history.push('/order-confirm')\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      if (isAccount) {\r\n        addToast(\"Registering customer already exist\", { appearance: \"error\", autoDismiss: true });\r\n\r\n      } else {\r\n        addToast(\"Your order submission has been failed\", { appearance: \"error\", autoDismiss: true });\r\n      }\r\n      setLoader(false)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const onConfirmPassword = (e) => {\r\n    if (watch('password') !== e.target.value) {\r\n      return setError(\r\n        paymentForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n  const onPasswordChange = (e) => {\r\n    // console.log(e.target.value)\r\n    // console.log(watch('repeatPassword'))\r\n    if (watch('repeatPassword') !== '' && watch('repeatPassword') !== e.target.value) {\r\n      return setError(\r\n        paymentForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n\r\n    } else {\r\n      clearErrors(paymentForm.repeatPassword.name);\r\n    }\r\n\r\n  }\r\n\r\n  const onAgreement = async() => {\r\n    let action = constant.ACTION.CONTENT + constant.ACTION.BOXES + constant.ACTION.AGREEMENT;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        setAgreementData(response.description.description)\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n\r\n  function changeAddress() {\r\n    var param = { 'postalCode': watch('postalCode'), 'countryCode': watch('country'), 'zoneCode': watch('stateProvince') }\r\n    if (isShipping) {\r\n     param = { 'postalCode': watch('shipPostalCode'), 'countryCode': watch('shipCountry'), 'zoneCode': watch('shipStateProvince')  }\r\n    } \r\n\r\n    var p = '';\r\n    if(p !== param) {\r\n\r\n      p = param;\r\n      //execute\r\n\r\n       \r\n       console.log('Required fields '+ JSON.stringify(param));\r\n       unity(p);\r\n  \r\n    } else {\r\n      return;\r\n    }\r\n\r\n  }\r\n\r\n  var unity = (function() {\r\n    var executed;\r\n    if(executed) {\r\n      return;\r\n    }\r\n    return function() {\r\n            if (!executed) {\r\n                executed = true;\r\n                //if( param.postalCode == null && param.country == null && param.zoneCode == null) {\r\n                //  return;\r\n                //}\r\n                var millisecondsToWait = 5000;\r\n                setTimeout(function() {\r\n                    // Whatever you want to do after the wait\r\n                    console.log('Into execution');\r\n\r\n\r\n                    executed = false;\r\n                }, millisecondsToWait);\r\n            } \r\n            return;\r\n            /**\r\n            console.log('The execution '+ executed);\r\n            var millisecondsToWait = 5000;\r\n            setTimeout(function() {\r\n                // Whatever you want to do after the wait\r\n                console.log('Into execution');\r\n                executed = false;\r\n            }, millisecondsToWait);\r\n            // do something\r\n            ?**/\r\n\r\n    };\r\n  })();\r\n  \r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"Checkout\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Checkout page of flone react minimalist eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n      {strings[\"Checkout\"]}\r\n      </BreadcrumbsItem>\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"checkout-area pt-95 pb-100\">\r\n\r\n          <div className=\"container\">\r\n            {\r\n\r\n              isValidObject(cartItems) && cartItems.products.length > 0 && !userData &&\r\n              <div className=\"checkout-heading\">\r\n                <Link to={\"/login\"}>{strings[\"Returning customer ? Click here to login\"]}</Link>\r\n              </div>\r\n\r\n            }\r\n\r\n            {isValidObject(cartItems) && cartItems.products.length > 0 ? (\r\n\r\n              <form>\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div className=\"billing-info-wrap\">\r\n                      <h3>{strings[\"Billing Details\"]}</h3>\r\n                      <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"First Name\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.firstName.name} ref={register(paymentForm.firstName.validate)} />\r\n                            {errors[paymentForm.firstName.name] && <p className=\"error-msg\">{errors[paymentForm.firstName.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Last Name\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.lastName.name} ref={register(paymentForm.lastName.validate)} />\r\n                            {errors[paymentForm.lastName.name] && <p className=\"error-msg\">{errors[paymentForm.lastName.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Company Name\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.company.name} ref={register(paymentForm.company.validate)} />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Street Address\"]}</label>\r\n                            <Script\r\n                              url={\"https://maps.googleapis.com/maps/api/js?key=\" + window._env_.APP_MAP_API_KEY + \"&libraries=places\"}\r\n                              onLoad={handleScriptLoad}\r\n                            />\r\n                            <input\r\n                              className=\"billing-address\"\r\n                              placeholder={strings[\"House number and street name\"]}\r\n                              type=\"text\"\r\n                              id=\"autocomplete\"\r\n                              name={paymentForm.address.name}\r\n                              ref={register(paymentForm.address.validate)}\r\n                            />\r\n                            {errors[paymentForm.address.name] && <p className=\"error-msg\">{errors[paymentForm.address.name].message}</p>}\r\n\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-select mb-20\">\r\n                            <label>{strings[\"Country\"]}</label>\r\n\r\n                            <Controller\r\n                              name={paymentForm.country.name}\r\n                              control={control}\r\n                              rules={paymentForm.country.validate}\r\n                              render={props => {\r\n                                return (\r\n                                  <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value); onChangeShipping() }} value={props.value}>\r\n                                    <option>{strings[\"Select a country\"]}</option>\r\n                                    {\r\n\r\n                                      shipCountryData.map((data, i) => {\r\n                                       //getShippingCountry(currentLanguageCode).map((data, i) => {\r\n                                        // shipCountryData.map((data, i) => {\r\n                                      \r\n                                        return <option key={i} value={data.code}>{data.name}</option>\r\n                                      })\r\n                                    }\r\n                                  </select>\r\n                                )\r\n                              }}\r\n                            />\r\n\r\n                            {errors[paymentForm.country.name] && <p className=\"error-msg\">{errors[paymentForm.country.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Town/City\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.city.name} ref={register(paymentForm.city.validate)} />\r\n                            {errors[paymentForm.city.name] && <p className=\"error-msg\">{errors[paymentForm.city.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-select mb-20\">\r\n                            <label>{strings[\"State\"]}</label>\r\n                            {\r\n                              stateData && stateData.length > 0 ?\r\n                                <Controller\r\n                                  name={paymentForm.stateProvince.name}\r\n                                  control={control}\r\n                                  rules={paymentForm.stateProvince.validate}\r\n                                  render={props => {\r\n                                    return (\r\n                                      <select onBlur={changeAddress()} onChange={(e) => props.onChange(e.target.value)} value={props.value}>\r\n                                        <option>{strings[\"State / province\"]}</option>\r\n                                        {\r\n                                          stateData.map((data, i) => {\r\n                                            return <option key={i} value={data.code}>{data.name}</option>\r\n                                          })\r\n                                        }\r\n                                      </select>)\r\n                                  }}\r\n                                />\r\n                                :\r\n                                <input type=\"text\" name={paymentForm.stateProvince.name} ref={register(paymentForm.stateProvince.validate)} />\r\n                            }\r\n                            {errors[paymentForm.stateProvince.name] && <p className=\"error-msg\">{errors[paymentForm.stateProvince.name].message}</p>}\r\n\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Postcode\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.postalCode.name} ref={register(paymentForm.postalCode.validate)} onChange={() => {\r\n\r\n                              clearTimeout(timer);\r\n                              setTimer(setTimeout(function () {\r\n                                onChangeShipping()\r\n                              }, 500))\r\n                            }} />\r\n                            {errors[paymentForm.postalCode.name] && <p className=\"error-msg\">{errors[paymentForm.postalCode.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Phone\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.phone.name} ref={register(paymentForm.phone.validate)} />\r\n                            {errors[paymentForm.phone.name] && <p className=\"error-msg\">{errors[paymentForm.phone.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Email address\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.email.name} ref={register(paymentForm.email.validate)} />\r\n                            {errors[paymentForm.email.name] && <p className=\"error-msg\">{errors[paymentForm.email.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      {\r\n                        !userData &&\r\n                        <div className=\"login-toggle-btn\">\r\n                          <input type=\"checkbox\" value={isAccount} onChange={() => setIsAccount(!isAccount)} />\r\n                          <label className=\"ml-10 mb-20\">{strings[\"Create an account\"]}</label>\r\n                        </div>\r\n                      }\r\n                      {\r\n                        isAccount &&\r\n                        <div>\r\n                          <p className=\"main-color\"> Create an account by entering the information below.If you are a returning customer please login using the link at the top of the page.</p>\r\n                          <div className=\"col-lg-12\">\r\n                            <div className=\"billing-info mb-20\">\r\n                              <label>Account Password</label>\r\n                              <input type=\"password\" name={paymentForm.password.name} ref={register(paymentForm.password.validate)} onChange={(e) => onPasswordChange(e)} />\r\n                              {errors[paymentForm.password.name] && <p className=\"error-msg\">{errors[paymentForm.password.name].message}</p>}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-lg-12\">\r\n                            <div className=\"billing-info mb-20\">\r\n                              <label>Repeat Account Password</label>\r\n                              <input type=\"password\" name={paymentForm.repeatPassword.name} ref={register(paymentForm.repeatPassword.validate)} onChange={(e) => onConfirmPassword(e)} />\r\n                              {errors[paymentForm.repeatPassword.name] && <p className=\"error-msg\">{errors[paymentForm.repeatPassword.name].message}</p>}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      }\r\n                      <div className=\"login-toggle-btn\">\r\n                        <input type=\"checkbox\" value={isShipping} onChange={onChangeShipAddress} />\r\n                        <label className=\"ml-10 mb-20\">{strings[\"SHIP TO A DIFFERENT ADDRESS?\"]}</label>\r\n                      </div>\r\n                      {\r\n                        isShipping &&\r\n                        <div className=\"billing-info-wrap\">\r\n                          <h3>{strings[\"Shipping Details\"]}</h3>\r\n                          <div className=\"row\">\r\n\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"First Name\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipFirstName.name} ref={register(paymentForm.shipFirstName.validate)} />\r\n                                {errors[paymentForm.shipFirstName.name] && <p className=\"error-msg\">{errors[paymentForm.shipFirstName.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Last Name\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipLastName.name} ref={register(paymentForm.shipLastName.validate)} />\r\n                                {errors[paymentForm.shipLastName.name] && <p className=\"error-msg\">{errors[paymentForm.shipLastName.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Company Name\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipCompany.name} ref={register(paymentForm.shipCompany.validate)} />\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Street Address\"]}</label>\r\n                                <input\r\n                                  className=\"billing-address\"\r\n                                  placeholder={strings[\"House number and street name\"]}\r\n                                  type=\"text\"\r\n                                  name={paymentForm.shipAddress.name}\r\n                                  ref={register(paymentForm.shipAddress.validate)}\r\n                                />\r\n                                {errors[paymentForm.shipAddress.name] && <p className=\"error-msg\">{errors[paymentForm.shipAddress.name].message}</p>}\r\n\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-select mb-20\">\r\n                                <label>{strings[\"Country\"]}</label>\r\n\r\n                                <Controller\r\n                                  name={paymentForm.shipCountry.name}\r\n                                  control={control}\r\n                                  rules={paymentForm.shipCountry.validate}\r\n                                  render={props => {\r\n                                    return (\r\n                                      <select onChange={(e) => { props.onChange(e.target.value); getShippingState(e.target.value); onChangeShipping() }} value={props.value}>\r\n                                        <option>{strings[\"Select a country\"]}</option>\r\n                                        {\r\n\r\n                                          shipCountryData.map((data, i) => {\r\n                                            return <option key={i} value={data.code}>{data.name}</option>\r\n                                          })\r\n                                        }\r\n                                      </select>\r\n                                    )\r\n                                  }}\r\n                                />\r\n\r\n                                {errors[paymentForm.shipCountry.name] && <p className=\"error-msg\">{errors[paymentForm.shipCountry.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Town/City\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipCity.name} ref={register(paymentForm.shipCity.validate)} />\r\n                                {errors[paymentForm.shipCity.name] && <p className=\"error-msg\">{errors[paymentForm.shipCity.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-select mb-20\">\r\n                                <label>{strings[\"State\"]}</label>\r\n                                {\r\n                                  shipStateData && shipStateData.length > 0 ?\r\n                                    <Controller\r\n                                      name={paymentForm.shipStateProvince.name}\r\n                                      control={control}\r\n                                      rules={paymentForm.shipStateProvince.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(a) => console.log('-----'+a)} value={props.value}>\r\n                                            <option>{strings[\"State / Province\"]}</option>\r\n                                            {\r\n                                              shipStateData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>)\r\n                                      }}\r\n                                    />\r\n                                    :\r\n                                    <input type=\"text\" name={paymentForm.shipStateProvince.name} ref={register(paymentForm.shipStateProvince.validate)} />\r\n                                }\r\n                                {errors[paymentForm.shipStateProvince.name] && <p className=\"error-msg\">{errors[paymentForm.shipStateProvince.name].message}</p>}\r\n\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Postcode\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipPostalCode.name} ref={register(paymentForm.shipPostalCode.validate)} onChange={() => {\r\n                                  clearTimeout(timer);\r\n                                  setTimer(setTimeout(function () {\r\n                                    onChangeShipping()\r\n                                  }, 500))\r\n                                }} />\r\n                                {errors[paymentForm.shipPostalCode.name] && <p className=\"error-msg\">{errors[paymentForm.shipPostalCode.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            {/* <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>Phone</label>\r\n                                <input type=\"text\" name={paymentForm.shipPhone.name} ref={register(paymentForm.shipPhone.validate)} />\r\n                                {errors[paymentForm.shipPhone.name] && <p className=\"error-msg\">{errors[paymentForm.shipPhone.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>Email Address</label>\r\n                                <input type=\"text\" name={paymentForm.shipEmail.name} ref={register(paymentForm.shipEmail.validate)} />\r\n                                {errors[paymentForm.shipEmail.name] && <p className=\"error-msg\">{errors[paymentForm.shipEmail.name].message}</p>}\r\n                              </div>\r\n                            </div> */}\r\n                          </div>\r\n                        </div>\r\n                      }\r\n                      <div className=\"additional-info-wrap\">\r\n                        <h4>{strings[\"Additional information\"]}</h4>\r\n                        <div className=\"additional-info\">\r\n                          <label>{strings[\"Order notes\"]}</label>\r\n                          <textarea\r\n                            placeholder={strings[\"Notes about your order, e.g. special notes for delivery.\"]}\r\n                            name=\"message\"\r\n                            defaultValue={\"\"}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6\">\r\n                    <div className=\"your-order-area\">\r\n                      <h3>{strings[\"Your order\"]}</h3>\r\n                      <div className=\"your-order-wrap gray-bg-4\">\r\n                        <div className=\"your-order-product-info\">\r\n                          <div className=\"your-order-top\">\r\n                            <ul>\r\n                              <li>{strings[\"Product\"]}</li>\r\n                              <li>{strings[\"Total\"]}</li>\r\n                            </ul>\r\n                          </div>\r\n                          <div className=\"your-order-middle\">\r\n                            <ul>\r\n                              {cartItems.products.map((cartItem, key) => {\r\n\r\n                                return (\r\n                                  <li key={key}>\r\n                                    <span className=\"order-middle-left\" style={{ width: 220 }}>\r\n                                      {cartItem.description.name}\r\n                                    </span>{\" \"}\r\n                                    <span>X {cartItem.quantity}</span>\r\n                                    <span className=\"order-price\">\r\n                                      {\r\n                                        cartItem.finalPrice\r\n                                      }\r\n                                    </span>\r\n                                  </li>\r\n                                );\r\n                              })}\r\n                            </ul>\r\n                          </div>\r\n                          <div className=\"your-order-sub-total\">\r\n                            {\r\n                              shippingQuote.length > 0 &&\r\n                              shippingQuote.map((quote, i) => {\r\n                                return (\r\n                                  quote.title !== 'Total' &&\r\n                                  <ul className=\"mb-20\" key={i}>\r\n                                    <li className=\"order-total\">{quote.title}</li>\r\n                                    <li>\r\n                                      {quote.total}\r\n                                    </li>\r\n                                  </ul>)\r\n                              })\r\n                            }\r\n\r\n                          </div>\r\n                          {\r\n                            config.displayShipping && shippingOptions &&\r\n                          <div className=\"your-order-bottom\">\r\n                            { \r\n                              <div className=\"shippingRow\">\r\n                                <ul><li className=\"your-order-shipping\">Shipping Fees</li></ul>\r\n\r\n                                <ul>\r\n\r\n                                  {\r\n                                    shippingOptions.map((value, i) => {\r\n                                      return (<li key={i}>\r\n                                        <div className=\"login-toggle-btn\">\r\n                                          <input type=\"radio\" value={value.shippingQuoteOptionId} onChange={() => { setSelectedOptions(value.shippingQuoteOptionId); shippingQuoteChange(value.shippingQuoteOptionId) }} checked={selectedOptions === value.shippingQuoteOptionId} />\r\n                                          <label className=\"ml-10 mb-20\">{value.optionName} - {value.optionPriceText}</label>\r\n                                        </div>\r\n                                      </li>)\r\n                                    })\r\n                                  }\r\n                                  <li style={{ textAlign: 'center', fontSize: 12, color: 'grey' }}> This option let you reserve you order items through the online system and pick\r\n                                        up your order by yourself at the store. this option is also offered when no\r\n                                        other shipping option is available for your region.</li>\r\n                                </ul>\r\n                              </div>\r\n\r\n                            }\r\n\r\n                            {/* {\r\n                              config.displayShipping && !shippingOptions &&\r\n                              <ul>\r\n                                <li className=\"your-order-shipping\">Shipping Fees</li>\r\n                                <li>Free shipping</li>\r\n                              </ul>\r\n                            } */}\r\n\r\n                          </div>\r\n                          }\r\n                          <div className=\"your-order-total\">\r\n                            <ul>\r\n                              <li className=\"order-total\">Total</li>\r\n                              <li>\r\n                                {\r\n                                  shippingQuote.length > 0 &&\r\n                                  shippingQuote.map((quote, i) => {\r\n                                    return quote.title === 'Total' && quote.total\r\n                                  })\r\n                                }\r\n                                {/* {cartItems.displayTotal} */}\r\n                              </li>\r\n                            </ul>\r\n                          </div>\r\n                        </div>\r\n\r\n                      </div>\r\n                      {\r\n                        window._env_.APP_PAYMENT_TYPE === 'STRIPE' &&\r\n                        <div className=\"payment-method mt-25\">\r\n                          <Elements stripe={stripePromise} \r\n                            options={{locale: currentLanguageCode}}\r\n                          >\r\n                            <ElementsConsumer>\r\n                              {({ stripe, elements }) => (\r\n                                <>\r\n                                  <div className=\"card-info\">\r\n                                    <CardElement options={CARD_ELEMENT_OPTIONS} stripe={stripe} onReady={e => setRef(e)} />\r\n                                  </div>\r\n                                  <div className=\"icon-container\">\r\n                                    <i className=\"fa fa-cc-visa\" style={{ color: 'navy' }}></i>\r\n                                    <i className=\"fa fa-cc-amex\" style={{ color: 'blue' }}></i>\r\n                                    <i className=\"fa fa-cc-mastercard\" style={{ color: 'red' }}></i>\r\n                                  </div>\r\n\r\n                                  <div className=\"place-order mt-100\">\r\n                                    <div className=\"login-toggle-btn mb-20\">\r\n                                      <input type=\"checkbox\" name={paymentForm.isAgree.name} ref={register(paymentForm.isAgree.validate)} onChange={onAgreement}/>\r\n                                      <label className=\"ml-10 \">{strings[\"I agree with the terms and conditions\"]}</label>\r\n                                      {errors[paymentForm.isAgree.name] && <p className=\"error-msg\">{errors[paymentForm.isAgree.name].message}</p>}\r\n                                    </div>\r\n                                    <div>\r\n                                      {\r\n                                          watch('isAgree') && \r\n                                          <div className=\"agreement-info-wrap\" dangerouslySetInnerHTML={{ __html: agreementData.replace(/>]]/g, \"&gt;\") }}>\r\n                                            {/* <textarea\r\n                                              readOnly={true}\r\n                                              name=\"message\"\r\n                                              defaultValue={() => renderAgreementText(agreementData)}\r\n                                            /> */}\r\n                                          </div>\r\n                                      }\r\n                                    \r\n                                    </div>\r\n                                    <button type=\"button\" onClick={handleSubmit((d) => onSubmitOrder(d, elements, stripe))} className=\"btn-hover\">{strings[\"Place your order\"]}</button>\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            </ElementsConsumer>\r\n                          </Elements>\r\n                        </div>\r\n                      }\r\n                      {\r\n                        window._env_.APP_PAYMENT_TYPE === 'NUVEI' &&\r\n                        <iframe title=\"Payment Page\" height={\"1150\"} width=\"570\" srcDoc='<form action=\"https://testpayments.nuvei.com/merchant/paymentpage\" method=\"post\">\r\n                        <input type=\"hidden\" name=\"TERMINALID\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"ORDERID\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"CURRENCY\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"AMOUNT\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"DATETIME\" value=\"22-01-2021:10:43:01:200\" />\r\n                        <input type=\"hidden\" name=\"HASH\" value=\"8636622c1dd4039783cd0fbcffd53a6ce2ceab7d0e183e8ce1b8043e3cdedebe3b6665c5e87d3b268e85217f6c11f15f09f86764d82b0bd923c8c19e9209296d\" />\r\n                        \r\n                        <button type=\"submit\"  style=\"font-weight: 500;\r\n                        line-height: 1;\r\n                        z-index: 9;\r\n                        display: block;\r\n                        width: 100%;\r\n                        padding: 18px 20px;\r\n                        text-align: center;\r\n                        letter-spacing: 1px;\r\n                        text-transform: uppercase;\r\n                        color: #fff;\r\n                        border: none;\r\n                        border-radius: 50px;\r\n                        background: none;\r\n                        background-color: #fb799c;\"className=\"btn-hover\">Pay now</button>\r\n                      </form>'></iframe>\r\n                      }\r\n                          </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </form>\r\n            ) : (\r\n                !isLoading && <div className=\"row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <div className=\"item-empty-area text-center\">\r\n                      <div className=\"item-empty-area__icon mb-30\">\r\n                        <i className=\"pe-7s-cash\"></i>\r\n                      </div>\r\n                      <div className=\"item-empty-area__text\">\r\n                      {strings[\"No items found in checkout\"]} <br />{\" \"}\r\n                        <Link to={\"/\"}>\r\n                        {strings[\"Shop now\"]}\r\n                      </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCheckout.propTypes = {\r\n  cartItems: PropTypes.object,\r\n  // currency: PropTypes.object,\r\n  location: PropTypes.object,\r\n  //currentLanguageCode: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cartID: state.cartData.cartID,\r\n    // countryData: state.userData.country,\r\n    shipCountryData: state.userData.shipCountry,\r\n    stateData: state.userData.state,\r\n    shipStateData: state.userData.shipState,\r\n    currentLocation: state.userData.currentAddress,\r\n    userData: state.userData.userData,\r\n    defaultStore: state.merchantData.defaultStore,\r\n    merchant: state.merchantData.merchant,\r\n    isLoading: state.loading.isLoading,\r\n    currentLanguageCode: state.multilanguage.currentLanguageCode,\r\n    // currency: state.currencyData\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    getShippingCountry: (value) => {\r\n      dispatch(getShippingCountry(value));\r\n    },\r\n    getState: (code) => {//state\r\n      dispatch(getState(code));\r\n    },\r\n    getShippingState: (code) => {\r\n      dispatch(getShippingState(code));\r\n    },\r\n    deleteAllFromCart: (orderID) => {\r\n      //dispatch(deleteAllFromCart(orderID));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(Checkout));\r\n"],"sourceRoot":""}