{"version":3,"sources":["pages/content/Content.js"],"names":["connect","state","currentLanguageCode","multilanguage","contentID","content","contentId","dispatch","setLoader","value","_ref","strings","_useState","useState","_useState2","_slicedToArray","contentDetails","setContentDetail","useEffect","getContent","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","response","wrap","_context","prev","next","concat","constant","ACTION","CONTENT","PAGES","isCheckValueAndSetParams","WebService","get","sent","t0","stop","apply","arguments","_jsxs","Fragment","children","MetaTags","_jsx","description","title","name","metaDescription","BreadcrumbsItem","to","Layout","headerContainerClass","headerPaddingClass","headerTop","Breadcrumb","className","dangerouslySetInnerHTML","__html"],"mappings":"+PAkFeA,6BAfS,SAACC,GACrB,MAAO,CACHC,oBAAqBD,EAAME,cAAcD,oBACzCE,UAAWH,EAAMI,QAAQC,UAEjC,IAC2B,SAAAC,GAEvB,MAAO,CACHC,UAAW,SAACC,GACRF,EAASC,YAAUC,GACvB,EAER,GAEeT,CAA6CG,yBArE5C,SAAHO,GAAgE,IAA1DC,EAAOD,EAAPC,QAASP,EAASM,EAATN,UAAWI,EAASE,EAATF,UAAWN,EAAmBQ,EAAnBR,oBAE9CU,EAA2CC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAhDI,EAAcF,EAAA,GAAEG,EAAgBH,EAAA,GACvCI,qBAAU,WAENC,GAEJ,GAAG,CAACf,IAEJ,IAAMe,EAAU,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEsH,OADrItB,GAAU,GACNiB,EAAM,GAAAM,OAAMC,IAASC,OAAOC,SAAOH,OAAGC,IAASC,OAAOE,OAAKJ,OAAG3B,GAAS2B,OAAGK,YAAyB,SAAUlC,IAAoB0B,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE5GO,IAAWC,IAAIb,GAAQ,KAAD,GAAvCC,EAAQE,EAAAW,OAGRtB,EAAiBS,GAErBlB,GAAU,GAAMoB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,SAEhBpB,GAAU,GAAM,yBAAAoB,EAAAa,OAAA,GAAAjB,EAAA,mBAEvB,kBAbe,OAAAJ,EAAAsB,MAAA,KAAAC,UAAA,KAchB,OACIC,eAACC,WAAQ,CAAAC,SAAA,CACLF,eAACG,IAAQ,CAAAD,SAAA,CACLE,cAAA,SAAAF,SAAQ9B,GAAkBA,EAAeiC,YAAYC,QACrDF,cAAA,QACIG,KAAK,cACL9C,QAASW,GAAkBA,EAAeiC,YAAYG,qBAI9DJ,cAACK,kBAAe,CAACC,GAAG,IAAGR,SAAEnC,EAAc,OACvCiC,eAACS,kBAAe,CAACC,GAAG,WAAUR,SAAA,CAAE9B,GAAkBA,EAAeiC,YAAYE,KAAK,OAElFP,eAACW,IAAM,CAACC,qBAAqB,kBACzBC,mBAAmB,mBACnBC,UAAU,UAASZ,SAAA,CAEnBE,cAACW,IAAU,IACXX,cAAA,OAAKY,UAAU,8BAA6Bd,SACxCE,cAAA,OAAKY,UAAU,YAAWd,SAElB9B,GACAgC,cAAA,KAAGa,wBAAyB,CAAEC,OAAQ9C,EAAeiC,YAAYA,wBAO7F,I","file":"static/js/22.3bb44ffa.chunk.js","sourcesContent":["\nimport React, { useEffect, Fragment, useState } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport WebService from '../../util/webService';\nimport constant from '../../util/constant';\nimport { setLoader } from \"../../redux/actions/loaderActions\";\nimport Layout from \"../../layouts/Layout\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nimport { connect } from 'react-redux';\nimport { multilanguage } from \"redux-multilanguage\";\nimport { isCheckValueAndSetParams } from '../../util/helper';\n\nconst Content = ({ strings, contentID, setLoader, currentLanguageCode }) => {\n\n    const [contentDetails, setContentDetail] = useState('');\n    useEffect(() => {\n        //console.log(contentID);\n        getContent();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contentID]);\n\n    const getContent = async () => {\n        setLoader(true)\n        let action = `${constant.ACTION.CONTENT}${constant.ACTION.PAGES}${contentID}${isCheckValueAndSetParams('?lang=', currentLanguageCode)}`;\n        try {\n            let response = await WebService.get(action);\n            if (response) {\n                //console.log(response)\n                setContentDetail(response)\n            }\n            setLoader(false)\n        } catch (error) {\n            setLoader(false)\n        }\n    }\n    return (\n        <Fragment>\n            <MetaTags>\n                <title>{contentDetails && contentDetails.description.title}</title>\n                <meta\n                    name=\"description\"\n                    content={contentDetails && contentDetails.description.metaDescription}\n                />\n            </MetaTags>\n\n            <BreadcrumbsItem to=\"/\">{strings[\"Home\"]}</BreadcrumbsItem>\n            <BreadcrumbsItem to=\"/content\">{contentDetails && contentDetails.description.name} </BreadcrumbsItem>\n\n            <Layout headerContainerClass=\"container-fluid\"\n                headerPaddingClass=\"header-padding-2\"\n                headerTop=\"visible\">\n                {/* breadcrumb */}\n                <Breadcrumb />\n                <div className=\"cart-main-area pt-90 pb-100\">\n                    <div className=\"container\">\n                        {\n                            contentDetails &&\n                            <p dangerouslySetInnerHTML={{ __html: contentDetails.description.description }} ></p>\n                        }\n                    </div>\n                </div>\n            </Layout>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        currentLanguageCode: state.multilanguage.currentLanguageCode,\n        contentID: state.content.contentId\n    };\n};\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        setLoader: (value) => {\n            dispatch(setLoader(value));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(Content));\n"],"sourceRoot":""}