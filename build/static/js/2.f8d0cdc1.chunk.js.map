{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/logic/attachEventListeners.ts","../../src/utils/onDomRemove.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","_createForOfIteratorHelper","o","allowArrayLike","it","length","i","F","s","n","done","value","e","_e","f","err","normalCompletion","didErr","call","step","next","_e2","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","ref","focus","options","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","previous","option","checked","selected","map","element","type","defaultResult","validResult","values","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","window","document","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","updateWatchedValue","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","React.useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","React.useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","React.createContext","displayName","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","meta","invalid","props","as","render","rest","componentProps","React.cloneElement","React.createElement"],"mappings":"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","file":"static/js/2.f8d0cdc1.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n"],"sourceRoot":""}