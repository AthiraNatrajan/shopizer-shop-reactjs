{"version":3,"sources":["pages/other/Cart.js"],"names":["couponCode","name","validate","required","value","message","pattern","defaultImage","product","images","length","imageUrl","image","connect","state","cartCount","cartData","cartID","defaultStore","merchantData","countryData","userData","country","stateData","merchant","isLoading","loading","dispatch","setLoader","decreaseQuantity","item","addToast","cartId","quantityCount","addToCart","increaseQuantity","deleteFromCart","getState","code","multilanguage","_ref","location","getValue","strings","useToasts","pathname","history","useHistory","_useState","useState","_useState2","_slicedToArray","cartItems","setCartItems","_useForm","useForm","mode","codeRef","register","codeSubmit","handleSubmit","codeErr","errors","_useState3","shippingOptions","useEffect","getCartData","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","response","wrap","_context","prev","next","constant","ACTION","CART","WebService","get","sent","t0","console","log","setTimeout","push","stop","apply","arguments","fetchData","_ref2","_callee2","_context2","applyPromoCode","_ref3","_callee3","data","param","_context3","PROMO","post","_x","_jsxs","Fragment","children","_jsx","MetaTags","BreadcrumbsItem","to","process","Layout","headerContainerClass","headerPaddingClass","headerTop","Breadcrumb","className","isValidObject","products","map","cartItem","key","finalDiscountedPrice","finalPrice","Link","description","friendlyUrl","src","alt","onClick","quantity","type","readOnly","displaySubTotal","forEach","promoCode","onSubmit","ref","style","marginTop","i","optionName","optionPriceText"],"mappings":"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","file":"static/js/23.abb1f439.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useState, useEffect } from \"react\";\r\nimport { multilanguage } from \"redux-multilanguage\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\n// import { Redirect } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\n// import { getDiscountPrice } from \"../../helpers/product\";\r\nimport { isValidObject } from \"../../util/helper\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { getState } from \"../../redux/actions/userAction\";\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\nimport {\r\n  addToCart,\r\n  // decreaseQuantity,\r\n  deleteFromCart,\r\n  // cartItemStock,\r\n  // deleteAllFromCart\r\n} from \"../../redux/actions/cartActions\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport constant from '../../util/constant';\r\nimport WebService from '../../util/webService';\r\n\r\nconst couponCode = {\r\n  code: {\r\n    name: 'code',\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Coupon code is required\"\r\n      },\r\n\r\n      pattern: {\r\n        value: /^([a-zA-Z0-9 _-]+)$/,\r\n        message: 'Please entered alphanumeric value'\r\n      }\r\n    }\r\n  }\r\n}\r\n// const quoteForm = {\r\n\r\n//   postalCode: {\r\n//     name: \"postalCode\",\r\n//     validate: {\r\n//       required: {\r\n//         value: true,\r\n//         message: \"postalCode is required\"\r\n//       }\r\n//     }\r\n//   },\r\n//   country: {\r\n//     name: \"country\",\r\n//     validate: {\r\n//       required: {\r\n//         value: true,\r\n//         message: \"Country is required\"\r\n//       }\r\n//     }\r\n//   },\r\n//   stateProvince: {\r\n//     name: \"stateProvince\",\r\n//     validate: {\r\n//       required: {\r\n//         value: true,\r\n//         message: \"State is required\"\r\n//       }\r\n//     }\r\n//   },\r\n// };\r\nconst Cart = ({\r\n  location,\r\n  cartID,\r\n  defaultStore,\r\n  decreaseQuantity,\r\n  increaseQuantity,\r\n  getValue,\r\n  deleteFromCart,\r\n  countryData,\r\n  stateData,\r\n  getState,\r\n  strings,\r\n  merchant,\r\n  isLoading,\r\n  setLoader,\r\n  cartCount\r\n  // deleteAllFromCart,\r\n\r\n}) => {\r\n  const { addToast } = useToasts();\r\n  const { pathname } = location;\r\n  const history = useHistory();\r\n  const [cartItems, setCartItems] = useState({})\r\n  // const cartTotalPrice = cartItems.displaySubTotal;\r\n  // const grandTotalPrice = cartItems.displaySubTotal;\r\n  // const { register, handleSubmit, control, errors } = useForm({ mode: 'onChange' });\r\n  const {\r\n    register: codeRef,\r\n    handleSubmit: codeSubmit,\r\n    errors: codeErr\r\n  } =\r\n    useForm({ mode: 'onChange' });\r\n\r\n  // const [shippingOptions, setShippingOptions] = useState();\r\n  const [shippingOptions] = useState();\r\n\r\n  useEffect(() => {\r\n    getCartData()\r\n    // if (!isValidObject(cartItems)) {\r\n    //   history.push('/')\r\n    // }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  useEffect(() => {\r\n    console.log(cartCount)\r\n    async function fetchData() {\r\n      let action = constant.ACTION.CART + cartID + '?store=' + defaultStore;\r\n      try {\r\n        let response = await WebService.get(action);\r\n        if (response) {\r\n          setCartItems(response)\r\n        }\r\n      } catch (error) {\r\n        console.log(error, 'jaimin')\r\n        setTimeout(() => {\r\n          history.push('/')\r\n        }, 200);\r\n      }\r\n    }\r\n    fetchData();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cartCount])\r\n\r\n  const getCartData = async () => {\r\n    setLoader(true)\r\n    let action = constant.ACTION.CART + cartID + '?store=' + defaultStore;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        setCartItems(response)\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      setLoader(false)\r\n      setTimeout(() => {\r\n        history.push('/')\r\n      }, 200);\r\n\r\n    }\r\n  }\r\n  const deleteAllFromCart = () => {\r\n    cartItems.products.forEach((value) => {\r\n      deleteFromCart(cartItems.code, value, defaultStore, addToast)\r\n    });\r\n    //go to home page\r\n    history.push('/');\r\n\r\n  }\r\n\r\n  // const decrease = (cartItems, item, qty) => {\r\n\r\n  // }\r\n\r\n  // const increase = (cartItems, item, key, addToast, qty) => {\r\n  //   console.log('increaseQuantity... ' + JSON.stringify(cartItems.products));          \r\n  //   item.quantity = qty;\r\n  //   console.log('quantity... ' + JSON.stringify(item)); \r\n  //   cartItems.products.splice(key,1,item);\r\n  //   console.log('New items... ' + JSON.stringify(cartItems.products)); \r\n  //   //modify qty\r\n\r\n  // }\r\n\r\n  // const getQuote = async (data) => {\r\n  //   let action = constant.ACTION.CART + cartID + '/' + constant.ACTION.SHIPPING;\r\n  //   let param = {};\r\n  //   param = { 'postalCode': data.postalCode, 'countryCode': data.country }\r\n  //   try {\r\n  //     let response = await WebService.post(action, param);\r\n  //     //console.log(response.shippingOptions);\r\n  //     if (response) {\r\n  //       setShippingOptions(response.shippingOptions)\r\n  //     }\r\n  //   } catch (error) {\r\n  //   }\r\n  // }\r\n  const applyPromoCode = async (data) => {\r\n    // console.log(data)\r\n    setLoader(true)\r\n    let action = constant.ACTION.CART + cartID + '/' + constant.ACTION.PROMO + data.code;\r\n    let param = {};\r\n    param = { 'promoCart': data.code }\r\n    try {\r\n      let response = await WebService.post(action, param);\r\n      // console.log(response);\r\n      if (response) {\r\n        setCartItems(response)\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      setLoader(false)\r\n    }\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"Place your order\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Cart page of flone react shopizer eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n\r\n      <BreadcrumbsItem to=\"/\">{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        {strings[\"Cart\"]}\r\n      </BreadcrumbsItem>\r\n\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"cart-main-area pt-90 pb-100\">\r\n          <div className=\"container\">\r\n            {isValidObject(cartItems) && cartItems.products.length > 0 ? (\r\n              <Fragment>\r\n                <h3 className=\"cart-page-title\">{strings[\"Your cart items\"]}</h3>\r\n                <div className=\"row custom-cart-item\">\r\n                  <div className=\"col-12\">\r\n                    <div className=\"table-content table-responsive cart-table-content\">\r\n                      <table>\r\n                        <thead>\r\n                          <tr>\r\n                            <th>{strings[\"Image\"]}</th>\r\n                            <th>{strings[\"Product Name\"]}</th>\r\n                            <th>{strings[\"Unit Price\"]}</th>\r\n                            <th>{strings[\"Qty\"]}</th>\r\n                            <th>{strings[\"Subtotal\"]}</th>\r\n                            <th>{strings[\"Action\"]}</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {cartItems.products.map((cartItem, key) => {\r\n\r\n                            // const finalProductPrice = cartItem.originalPrice;\r\n                            const finalDiscountedPrice = cartItem.finalPrice;\r\n\r\n                            return (\r\n                              <tr key={key}>\r\n                                <td className=\"product-thumbnail\">\r\n                                  <Link to={\"/product/\" + cartItem.description.friendlyUrl} >\r\n                                    <img className=\"img-fluid\" src={defaultImage(cartItem)} alt=\"\" />\r\n                                  </Link>\r\n                                </td>\r\n\r\n                                <td className=\"product-name\">\r\n                                  <Link to={\"/product/\" + cartItem.description.friendlyUrl}>\r\n                                    {cartItem.description.name}\r\n                                  </Link>\r\n                                </td>\r\n\r\n                                <td className=\"product-price-cart\">\r\n                                  {/* {cartItem.discounted ? (\r\n                                    <Fragment>\r\n                                      <span className=\"amount old\">\r\n                                        {finalProductPrice}\r\n                                      </span>\r\n                                      <span className=\"amount\">\r\n                                        {finalDiscountedPrice}\r\n                                      </span>\r\n                                    </Fragment>\r\n                                  ) : ( */}\r\n                                  <span className=\"amount\">\r\n                                    {finalDiscountedPrice}\r\n                                  </span>\r\n                                  {/* )} */}\r\n                                </td>\r\n\r\n                                <td className=\"product-quantity\">\r\n                                  <div className=\"cart-plus-minus\">\r\n                                    {/* <button className=\"dec qtybutton\" onClick={() => decreaseQuantity(cartItems, key, cartItem, addToast, cartItems.code, cartItem.quantity - 1, defaultStore)} > - </button>\r\n                                    <input className=\"cart-plus-minus-box\" onChange={() => getValue()} type=\"text\" value={cartItem.quantity} />\r\n                                    <button className=\"inc qtybutton\" onClick={() => increaseQuantity(cartItem, cartID, cartItem.quantity + 1, addToast)}>+</button> */}\r\n                                    <button className=\"dec qtybutton\" onClick={() => decreaseQuantity(cartItem, addToast, cartItems.code, cartItem.quantity - 1, defaultStore)} > - </button>\r\n                                    <input className=\"cart-plus-minus-box\" type=\"text\" value={cartItem.quantity} readOnly />\r\n                                    <button className=\"inc qtybutton\" onClick={() => increaseQuantity(cartItem, addToast, cartItems.code, cartItem.quantity + 1, defaultStore)}>+</button>\r\n\r\n                                  </div>\r\n                                </td>\r\n                                <td className=\"product-subtotal\">\r\n                                  {\r\n                                    cartItem.displaySubTotal\r\n                                  }\r\n                                </td>\r\n\r\n                                <td className=\"product-remove\">\r\n                                  <button onClick={() => deleteFromCart(cartItems.code, cartItem, defaultStore, addToast)}> <i className=\"fa fa-times\"></i> </button>\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <div className=\"cart-shiping-update-wrapper\">\r\n\r\n                      <div className=\"cart-clear\">\r\n                        <button onClick={() => deleteAllFromCart()}>\r\n                          {strings[\"Clear Shopping Cart\"]}\r\n                        </button>\r\n                      </div>\r\n                      <div className=\"cart-shiping-update\">\r\n                        <Link to=\"/\">{strings[\"Continue Shopping\"]} </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"row cart-custom-row\">\r\n                  <div className=\"col-lg-4 col-md-6\">\r\n                    &nbsp;\r\n                  </div>\r\n                  {/* \r\n                  <div className=\"col-lg-4 col-md-6\">\r\n                    <div className=\"cart-tax\">\r\n                      <div className=\"title-wrap\">\r\n                        <h4 className=\"cart-bottom-title section-bg-gray\">\r\n                          {strings[\"Estimate Shipping And Tax\"]}\r\n                        </h4>\r\n                      </div>\r\n                      <div className=\"tax-wrapper\">\r\n                        <p>\r\n                          {strings[\"Enter your destination to get a shipping estimate.\"]}\r\n                        </p>\r\n                        <div className=\"tax-select-wrapper\">\r\n                          <form onSubmit={handleSubmit(getQuote)}>\r\n                            <div className=\"tax-select\">\r\n                              <Controller\r\n                                name={quoteForm.country.name}\r\n                                control={control}\r\n                                rules={quoteForm.country.validate}\r\n                                render={props => {\r\n                                  return (\r\n                                    <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value) }} value={props.value}>\r\n                                      <option>{strings[\"Select a country\"]}</option>\r\n                                      {\r\n\r\n                                        countryData.map((data, i) => {\r\n                                          return <option key={i} value={data.code}>{data.name}</option>\r\n                                        })\r\n                                      }\r\n                                    </select>\r\n                                  )\r\n                                }}\r\n                              />\r\n                              {errors[quoteForm.country.name] && <p className=\"error-msg\">{errors[quoteForm.country.name].message}</p>}\r\n                            </div>\r\n                            <div className=\"tax-select\">\r\n                              {\r\n                                stateData && stateData.length > 0 ?\r\n                                  <Controller\r\n                                    name={quoteForm.stateProvince.name}\r\n                                    control={control}\r\n                                    rules={quoteForm.stateProvince.validate}\r\n                                    render={props => {\r\n                                      return (\r\n                                        <select onChange={(e) => { props.onChange(e.target.value) }} value={props.value}>\r\n                                          <option>{strings[\"Select a state\"]}</option>\r\n                                          {\r\n                                            stateData.map((data, i) => {\r\n                                              return <option key={i} value={data.code}>{data.name}</option>\r\n                                            })\r\n                                          }\r\n                                        </select>)\r\n                                    }}\r\n                                  />\r\n                                  :\r\n                                  <input type=\"text\" name={quoteForm.stateProvince.name} ref={register(quoteForm.stateProvince.validate)} placeholder={strings[\"State\"]} />\r\n                              }\r\n                              {errors[quoteForm.stateProvince.name] && <p className=\"error-msg\">{errors[quoteForm.stateProvince.name].message}</p>}\r\n                            </div>\r\n                            <div className=\"tax-select\">\r\n                              \r\n                              <input type=\"text\" name={quoteForm.postalCode.name} ref={register(quoteForm.postalCode.validate)} placeholder={strings[\"Postcode\"]} />\r\n                              {errors[quoteForm.postalCode.name] && <p className=\"error-msg\">{errors[quoteForm.postalCode.name].message}</p>}\r\n                            </div>\r\n                            <button className=\"cart-btn-2\" type=\"submit\" >\r\n                              {strings[\"Get A Quote\"]}\r\n                            </button>\r\n                          </form>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                  </div>\r\n                    */}\r\n\r\n                  <div className=\"col-lg-8 col-md-6 cart-total\">\r\n                    <div className=\"box-custom\">\r\n                      <div className=\"discount-code-wrapper coupon-code\">\r\n                        <div className=\"title-wrap\">\r\n                          <h4 className=\"cart-bottom-title section-bg-gray\">\r\n                            {strings[\"Use Coupon Code\"]}\r\n                          </h4>\r\n                        </div>\r\n                        {\r\n                          cartItems.promoCode ?\r\n                            <div className=\"discount-code\">\r\n                              <p className=\"coupon-applied\">Your coupon code has been applied!</p>\r\n                              <h1 className=\"promoCode\">{cartItems.promoCode}</h1>\r\n                            </div> :\r\n                            <div className=\"discount-code\">\r\n                              <p>{strings[\"Enter your coupon code if you have one.\"]}</p>\r\n                              <form onSubmit={codeSubmit(applyPromoCode)}>\r\n                                <input type=\"text\" name={couponCode.code.name} ref={codeRef(couponCode.code.validate)} />\r\n                                {codeErr[couponCode.code.name] && <p className=\"error-msg\">{codeErr[couponCode.code.name].message}</p>}\r\n                                <button className=\"cart-btn-2\" type=\"submit\">\r\n                                  {strings[\"Apply Coupon\"]}\r\n                                </button>\r\n                              </form>\r\n                            </div>\r\n                        }\r\n\r\n                      </div>\r\n\r\n                      <div className=\"grand-totall cart-total-box\">\r\n                        <div className=\"title-wrap\">\r\n                          <h4 className=\"cart-bottom-title section-bg-gary-cart\">\r\n                            {strings[\"Cart Total\"]}\r\n                          </h4>\r\n                        </div>\r\n                        <h5>\r\n                          {strings[\"Total products\"]}{\" \"}\r\n                          <span>\r\n                            {cartItems.displaySubTotal}\r\n                          </span>\r\n                        </h5>\r\n                        <h4 className=\"grand-totall-title\">\r\n                          {strings[\"Grand Total\"]}{\" \"}\r\n                          <span>\r\n                            {cartItems.displaySubTotal}\r\n                          </span>\r\n                        </h4>\r\n                        <Link to={process.env.PUBLIC_URL + \"/checkout\"}>\r\n                          {strings[\"Proceed to Checkout\"]}\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                    {\r\n                      shippingOptions &&\r\n                      <div className=\"grand-totall\" style={{ marginTop: 30 }}>\r\n                        <div className=\"title-wrap\">\r\n                          <h4 className=\"cart-bottom-title section-bg-gary-cart\">\r\n                            {\"Shipping and tax\"}\r\n                          </h4>\r\n                        </div>\r\n                        {\r\n                          shippingOptions.map((value, i) => {\r\n                            return (<h5 key={i}>\r\n                              {value.optionName}{\" \"}\r\n                              <span>\r\n                                {value.optionPriceText}\r\n                              </span>\r\n                            </h5>)\r\n                          })\r\n                        }\r\n                      </div>\r\n                    }\r\n                  </div>\r\n\r\n                </div>\r\n              </Fragment>\r\n            ) : (\r\n                !isLoading && <div className=\"row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <div className=\"item-empty-area text-center\">\r\n                      <div className=\"item-empty-area__icon mb-30\">\r\n                        <i className=\"pe-7s-cart\"></i>\r\n                      </div>\r\n                      <div className=\"item-empty-area__text\">\r\n                        {strings[\"No items found in cart\"]} <br />{\" \"}\r\n                        <Link to=\"/\">\r\n                          {strings[\"Shop now\"]}\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCart.propTypes = {\r\n  // addToCart: PropTypes.func,\r\n  cartItems: PropTypes.object,\r\n  // currency: PropTypes.object,\r\n  decreaseQuantity: PropTypes.func,\r\n  increaseQuantity: PropTypes.func,\r\n  location: PropTypes.object,\r\n  deleteAllFromCart: PropTypes.func,\r\n  deleteFromCart: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n\r\n    cartCount: state.cartData.cartCount,\r\n    cartID: state.cartData.cartID,\r\n    defaultStore: state.merchantData.defaultStore,\r\n    countryData: state.userData.country,\r\n    stateData: state.userData.state,\r\n    merchant: state.merchantData.merchant,\r\n    isLoading: state.loading.isLoading\r\n  };\r\n};\r\n\r\nfunction defaultImage(product) {\r\n  if (product.images && product.images.length > 0) {\r\n    return product.images[0].imageUrl;\r\n  } else if (product.image != null) {\r\n    return product.imageUrl;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // addToCart: (item, addToast, quantityCount) => {\r\n    //   dispatch(addToCart(item, addToast, quantityCount));\r\n    // },\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    decreaseQuantity: (item, addToast, cartId, quantityCount, defaultStore) => {\r\n      dispatch(addToCart(item, addToast, cartId, quantityCount, defaultStore));\r\n    },\r\n    increaseQuantity: (item, addToast, cartId, quantityCount, defaultStore) => {\r\n      dispatch(addToCart(item, addToast, cartId, quantityCount, defaultStore));\r\n    },\r\n    // decreaseQuantity: (cartItems, key, item, addToast, cartId, quantityCount, defaultStore) => {\r\n    //   console.log('decreaseQuantity...');\r\n    //   //dispatch(addToCart(item, addToast, cartId, quantityCount, defaultStore));\r\n    // },\r\n    // increaseQuantity: (item, cartId, quantityCount, addToast) => {\r\n    //   dispatch(addToCart(item, addToast, cartId, quantityCount, ''));\r\n    // },\r\n    // getValue: () => {\r\n    //   return 5;\r\n    // },\r\n    deleteFromCart: (cartId, item, defaultStore, addToast) => {\r\n      dispatch(deleteFromCart(cartId, item, defaultStore, addToast));\r\n    },\r\n    getState: (code) => {\r\n      dispatch(getState(code));\r\n    }\r\n    // deleteAllFromCart: addToast => {\r\n    //   dispatch(deleteAllFromCart(addToast));\r\n    // }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(Cart));\r\n"],"sourceRoot":""}